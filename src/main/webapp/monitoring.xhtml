<?xml version="1.0" encoding="UTF-8"?>
<!--
To change this license header, choose License Headers in Project Properties.
To change this template file, choose Tools | Templates
and open the template in the editor.
-->
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:b="http://bootsfaces.net/ui">
    <h:head>
        <title>TODO supply a title</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0"/>

        <script
            src="https://code.jquery.com/jquery-3.1.1.min.js"
            crossorigin="anonymous">
        </script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.bundle.js"></script>  
        <h:outputScript library="js" name="bpmn-js/bpmn-navigated-viewer.js"/>

        <f:metadata>
            <f:viewParam name="taskId" />
            <f:event type="preRenderView" listener="#{businessProcess.startTask(taskId, true)}" />
        </f:metadata>


    </h:head>
    <h:body>
        <b:container>
            <f:event type="preRenderView" listener="#{managedBean.setBusinessProcess(businessProcess)}" />

            <style>
                .highlight:not(.djs-connection) .djs-visual > :nth-child(1) {
                    fill: DeepSkyBlue  !important; /* color elements as green */
                }
            </style>


            <div id="canvas"></div>
            <script>
                var xml = ` #{diagramBean.processDiagram}`;
                var BpmnNavigatedViewer = window.BpmnJS;
                var viewer = new BpmnNavigatedViewer({container: '#canvas'});
                var canvas;
                var loaded;
                viewer.importXML(xml, function (err) {

                    if (!err) {
                        console.log('success!');
                        viewer.get('canvas').zoom('fit-viewport', 'auto');
                        canvas = viewer.get('canvas');
                        var ids = [#{diagramBean.elements}];
                        ids.forEach(function (item) {
                            canvas.addMarker(item, 'highlight');
                        });
                        loaded = true;
                    } else {
                        console.log('something went wrong:', err);
                    }
                });

                var highlight = function (ids) {
                    var canvas = viewer.get('canvas');
                    for (var property in canvas._elementRegistry._elements) {
                        if (canvas._elementRegistry._elements.hasOwnProperty(property)) {
                            canvas.removeMarker(property, 'highlight');
                        }
                    }
                    if (loaded) {
                        ids.forEach(function (item) {
                            canvas.addMarker(item, 'highlight');
                        });
                    }
                };
            </script>


            <h:form id="controll">
                <b:row>
                    <b:column medium-screen="6">
                        <b:panelGrid columns="2" size="xs">
                            <b:commandButton action="#{managedBean.override(businessProcess.processInstanceId)}" value="Override" disabled="#{managedBean.getStage(businessProcess.processInstanceId) eq 'hold'}" ajax="true" process="@this" update="controll"/>
                            <b:selectBooleanCheckbox  value="#{managedBean.controllStir}" caption="Řídit míchání">
                                <f:ajax event="change" execute="@this" render="@none"/>
                            </b:selectBooleanCheckbox>
                        </b:panelGrid>
                    </b:column>
                    <b:column medium-screen="6">

                    </b:column>
                </b:row>
            </h:form>
            <h:form id="state">
                <script>
                    highlight([#{diagramBean.elements}]);
                </script>
                <b:poll interval="1000" update="state"/>
                <b:panelGrid col-spans="6,6" id="info">
                    <h:panelGroup layout="block">
                        <h1>Aktuální stav</h1>
                        <b:panelGrid colSpans="6,6" size="xs">
                            Stav: 
                            <h:outputText value="#{managedBean.getStage(businessProcess.processInstanceId) eq 'hold' ? 'Probíhá prodleva' : 'Přechod na další prodlevu'}"/>
                            Od začátku procesu: 
                            <h:outputText value="#{managedBean.getProcessStart(businessProcess.processInstanceId)}"/>
                            Do konce prodlevy: 
                            <h:outputText value="#{managedBean.getStageEnd(businessProcess.processInstanceId)}"/>
                            Prodleva: 
                            <h:outputText value="#{managedBean.curentTaskName}"/>
                            Teplota: 
                            <h:outputText value="#{managedBean.getEntry('temp1')} °C"/>
                            Výkon: 
                            <h:outputText value="#{managedBean.getEntry('power1')} %"/> 
                            Poslední refresh: 
                            <h:outputText value="#{managedBean.currentTimeAgo}" style="font-weight:  bold; color: #{managedBean.currentTimeAgo eq 'teď' ? 'chartreuse' : 'red'}"/> 
                            Míchání:
                            <b:iconAwesome name="power-off" style="color: #{managedBean.getEntry('stir') eq 1 ? 'chartreuse' : 'red'}"/>
                            
                        </b:panelGrid>
                    </h:panelGroup>
                    <h:panelGroup  layout="block">
                        <h1>Plán</h1>
                        <b:panelGrid colSpans="6,3,3" size="xs">
                            Vystírka:
                            <h:outputText value="#{processVariables['vystirkaTemp']} °C"/>
                            <h:outputText value="#{processVariables['vystirkaTime']} min"/>
                            Peptonizace:
                            <h:outputText value="#{processVariables['peptonizaceTemp']} °C"/>
                            <h:outputText value="#{processVariables['peptonizaceTime']} min"/>
                            Nižší cukrotvorná:
                            <h:outputText value="#{processVariables['nizsiTemp']} °C"/>
                            <h:outputText value="#{processVariables['nizsiTime']} min"/>
                            Vyšší cukrotvorná:
                            <h:outputText value="#{processVariables['vyssiTemp']} °C"/>
                            <h:outputText value="#{processVariables['vyssiTime']} min"/>
                            Odrmutování:
                            <h:outputText value="#{processVariables['odrmutovaniTemp']} °C"/>
                            <h:outputText value="#{processVariables['odrmutovaniTime']} min"/>
                        </b:panelGrid>
                    </h:panelGroup>
                </b:panelGrid>

                <h:panelGroup layout="block" id="chart">
                    <div style="width:100%;">
                        <canvas id="myChart"></canvas>
                    </div>

                    <script>

                        //debugger;
                        data = {
                            labels: #{managedBean.dates},
                            datasets: [
                                {
                                    type: 'line',
                                    label: "Naměřená teplota",
                                    lineTension: 0,
                                    borderColor: 'rgba(0, 255, 0, 1)',
                                    backgroundColor: 'rgba(0, 255, 0, 0.1)',
                                    data: #{managedBean.tempMeasured}
                                }, {
                                    type: "line",
                                    label: "Výkon",
                                    lineTension: 0,
                                    borderColor: 'rgba(255, 0, 0, 1)',
                                    backgroundColor: 'rgba(0, 0, 0, 0)',
                                    data: #{managedBean.power}
                                }]
                        };
                        var ctx = document.getElementById("myChart");
                        var myLineChart = new Chart(ctx, {
                            type: "bar",
                            data: data,
                            lineTension: 0,
                            options: {
                                scales: {
                                    xAxes: [{
                                            type: 'time',
                                            time: {
                                                tooltipFormat: 'HH:mm',
                                                displayFormats: {
                                                    'millisecond': 'HH:mm',
                                                    'second': 'HH:mm:ss',
                                                    'minute': 'HH:mm',
                                                    'hour': 'HH:mm'
                                                },
                                            }
                                        }]
                                },
                                animation: false,
                                elements: {point: {radius: 0}}
                            }
                        });

                        if (canvas) {
                            for (var key in canvas._elementRegistry._elements) {
                                // skip loop if the property is from prototype
                                if (!canvas._elementRegistry._elements.hasOwnProperty(key))
                                    continue;

                                var obj = canvas._elementRegistry._elements[key];
                                for (var prop in obj) {
                                    // skip loop if the property is from prototype
                                    if (!obj.hasOwnProperty(prop))
                                        continue;

                                    canvas.removeMarker(key, 'highlight');

                                }
                            }
                            var ids = [#{diagramBean.elements}];
                            ids.forEach(function (item) {
                                canvas.addMarker(item, 'highlight');
                            });
                        }


                    </script>
                </h:panelGroup>

            </h:form>
        </b:container>

    </h:body>
</html>
